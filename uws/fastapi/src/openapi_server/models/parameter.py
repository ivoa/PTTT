# coding: utf-8

"""
    Universal Worker Service (UWS)

    The Universal Worker Service (UWS) pattern defines how to manage asynchronous execution of jobs on a service.

    The version of the OpenAPI document: 1.2
    Contact: grid@ivoa.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Optional

from pydantic import BaseModel, Field, StrictBool, StrictStr


class Parameter(BaseModel):
    """
    The list of input parameters to the job - if the job description language does not naturally have parameters, then this list should contain one element which is the content of the original POST that created the job.
    """  # noqa: E501

    by_reference: Optional[StrictBool] = Field(
        default=False,
        description="If this attribute is true then the content of the parameter represents a URL to retrieve the actual parameter value.  It is up to the implementation to decide if a parameter value cannot be returned directly as the content - the basic rule is that the representation of the parameter must allow the whole job element to be valid XML. If this cannot be achieved then the parameter value must be returned by reference. ",
        alias="byReference",
    )
    id: StrictStr = Field(description="The identifier for the parameter ")
    is_post: Optional[StrictBool] = Field(default=None, alias="isPost")
    __properties: ClassVar[list[str]] = ["byReference", "id", "isPost"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Parameter:
        """Create an instance of Parameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Parameter:
        """Create an instance of Parameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "byReference": obj.get("byReference") if obj.get("byReference") is not None else False,
                "id": obj.get("id"),
                "isPost": obj.get("isPost"),
            }
        )
        return _obj
