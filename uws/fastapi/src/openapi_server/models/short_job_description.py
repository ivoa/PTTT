# coding: utf-8

"""
    Universal Worker Service (UWS)

    The Universal Worker Service (UWS) pattern defines how to manage asynchronous execution of jobs on a service.

    The version of the OpenAPI document: 1.2
    Contact: grid@ivoa.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Optional

from openapi_server.models.execution_phase import ExecutionPhase
from pydantic import BaseModel, Field, StrictStr
from typing_extensions import Annotated


class ShortJobDescription(BaseModel):
    """
    ShortJobDescription
    """  # noqa: E501

    phase: Optional[ExecutionPhase] = None
    run_id: Optional[Annotated[str, Field(strict=True)]] = Field(
        default=None,
        description="This is a client supplied identifier - the UWS system does nothing other than to return it as part of the description of the job ",
        alias="runId",
    )
    owner_id: Optional[StrictStr] = Field(
        default=None,
        description="The owner (creator) of the job - this should be expressed as a string that can be parsed in accordance with IVOA security standards. If there was no authenticated job creator then this should be set to NULL. ",
        alias="ownerId",
    )
    creation_time: Optional[datetime] = Field(
        default=None, description="The instant at which the job was created. ", alias="creationTime"
    )
    jobId: StrictStr = Field(description="The identifier for the job ")
    type: Optional[StrictStr] = Field(default="simple", description="xlink type ")
    href: Optional[StrictStr] = Field(default=None, description="xlink href ")
    __properties: ClassVar[list[str]] = ["phase", "runId", "ownerId", "creationTime", "id", "type", "href"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ShortJobDescription:
        """Create an instance of ShortJobDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # set to None if owner_id (nullable) is None
        # and model_fields_set contains the field
        if self.owner_id is None and "owner_id" in self.model_fields_set:
            _dict["ownerId"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ShortJobDescription:
        """Create an instance of ShortJobDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "phase": obj.get("phase"),
                "runId": obj.get("runId"),
                "ownerId": obj.get("ownerId"),
                "creationTime": obj.get("creationTime"),
                "jobId": obj.get("jobId"),
                "type": obj.get("type") if obj.get("type") is not None else "simple",
                "href": obj.get("href"),
            }
        )
        return _obj
