# coding: utf-8

"""
    Universal Worker Service (UWS)

    The Universal Worker Service (UWS) pattern defines how to manage asynchronous execution of jobs on a service.

    The version of the OpenAPI document: 1.2
    Contact: grid@ivoa.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Optional

from pydantic import BaseModel

from openapi_server.models.short_job_description import ShortJobDescription
from openapi_server.models.uws_version import UWSVersion


class Jobs(BaseModel):
    """
    The list of job references returned at /(jobs)  The list presented may be affected by the current security context and may be filtered
    """ # noqa: E501
    jobref: Optional[list[ShortJobDescription]] = None
    version: Optional[UWSVersion] = None
    __properties: ClassVar[list[str]] = ["jobref", "version"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Jobs:
        """Create an instance of Jobs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in jobref (list)
        _items = []
        if self.jobref:
            for _item in self.jobref: #pylint: disable=not-an-iterable
                if _item:
                    _items.append(_item.to_dict())
            _dict['jobref'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Jobs:
        """Create an instance of Jobs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "jobref": [ShortJobDescription.from_dict(_item) for _item in obj.get("jobref")] if obj.get("jobref") is not None else None,
            "version": obj.get("version")
        })
        return _obj


